#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdlib>

#include <TFile.h>
#include <TTree.h>
#include <TH1.h>
#include <TH2.h>
#include <TStopwatch.h>

using namespace std;

//===== Define Input/Output File =====
string ifname[12];
TString ofname;
ifstream rawdata[12];
ifstream readfile;
bool End_of_Raw = false;
bool End_of_File[12] = {false};
bool AllOK = true;
//===== Define Variables ======
//===== Raw Data =====
int Traw_L[12][32][10]; // Leading  : [Kalliope][KEL][ch][Multiplicity]
int Traw_T[12][32][10]; // Trailing : [Kalliope][KEL][ch][Multiplicity]
int Traw_TOT[12][32][10];
int Traw_num[2][2][32] = {}; // Malitiplicity of [Kalliope IP][L/Tr][CH]
int Nevent = 0;
bool SameEvent = false;
int hitNmax =2; // Multiplicity Max
int ch;
int LT;
int IP;
unsigned int data;

//===== Fiber CH =====
int xy=-999;
int ud=-999;
int oi=-999;
int ch_offset=-999;
  
bool Fired_T [2][2][2][64];      // [x/y][UP/DOWN][1st/2nd][ch][Multiplicity]
int Fiber_L  [2][2][2][64];   // [x/y][UP/DOWN][1st/2nd][ch][Multiplicity]
int Fiber_T  [2][2][2][64];   // [x/y][UP/DOWN][1st/2nd][ch][Multiplicity]
int Fiber_Q  [2][2][2][64]; // [x/y][UP/DOWN][1st/2nd][ch][Multiplicity]
int Fiber_num[2][2][2][64] = {}; // Multipulicity


unsigned int Read_Raw_32bit(const char* b) // Little Endian
{
  return ((b[3] << 24) & 0xff000000) | // shift the 1st byte to 24 bit left
    ((b[2] << 16) & 0x00ff0000) | // shift the 2nd byte to 16 bit left
    ((b[1] <<  8) & 0x0000ff00) | // shift the 3rd byte to 08 bit left
    ((b[0] <<  0) & 0x000000ff);  // shift the 4th byte to 00 bit left
}

void assignFiber(int &fiber_ch, int &ud, int oi){
  if (oi == 1) { // for inner fiber
    int q   = fiber_ch / 4;
    int mod = fiber_ch % 4;
    int Q   = fiber_ch / 8;
    // ch assignment
    if (q % 2 == 0) ud = 0; else ud = 1;
    switch (mod) {
    case 0: fiber_ch = 4 * Q + 3; break;
    case 1: fiber_ch = 4 * Q;     break;
    case 2: fiber_ch = 4 * Q + 1; break;
    case 3: fiber_ch = 4 * Q + 2; break;
    }
  }
}

void Initialize(int &Nevent, bool &SameEvent){
  if(IP==0) Nevent++;
  int TRG_IN = data & 0x00ffffff;
  SameEvent = true;
  //===== Initialize Readfile for the next event =====
  if(IP==0){
    int ch = -999;
    for(int i=0;i<12;i++)for(int j=0;j<32;j++)for(int k=0;k<10;k++)Traw_L[i][j][k]=-100;
    for(int i=0;i<12;i++)for(int j=0;j<32;j++)for(int k=0;k<10;k++)Traw_T[i][j][k]=-100;
    for(int i=0;i<12;i++)for(int j=0;j<2;j++)for(int k=0;k<32;k++)Traw_num[i][j][k]=0;
    //===== Reline up =====
    for(int i=0;i<2;i++){        // x or y
      for(int j=0;j<2;j++){      // up or dpwn
	for(int k=0;k<2;k++){    // in or out
	  for(int l=0;l<64;l++){ // ch
	    Fired_T  [i][j][k][l] = false;
	    Fiber_num[i][j][k][l] = 0;
	    Fiber_L  [i][j][k][l] = -100;
	    Fiber_T  [i][j][k][l] = -100;
	    Fiber_Q  [i][j][k][l] = -100;
	  }
	}
      }
    }
  }
}

void Timing(int LT, int data){
  ch = (data >> 16) & 0x000000ff;
  int time = data & 0x0000ffff;
	  
  if(Traw_num[IP][LT][ch] < hitNmax){
    Traw_L[IP][ch][Traw_num[IP][LT][ch]] = time;
    if(Traw_num[IP][LT][ch] == 0){ // hitN=0 -> Fill in Fiber_T
      int fiber_ch = ch + ch_offset*32;
      assignFiber(fiber_ch, ud, oi);
      Fiber_L[xy][ud][oi][fiber_ch] = time;
    }
    Traw_num[IP][LT][ch]++;
  }
}

void GateNETtime(ifstream& rawdata, unsigned int data) {
    uint32_t nextData;
    char Byte[4];
    rawdata.read(Byte, 4);
    if (!rawdata) {
        cerr << "次の32ビットデータを読み込めませんでした。" << endl;
        return;
    }
    nextData = Read_Raw_32bit(Byte);
    cout << "data : " << hex << data << endl;
    cout << "nextData : " << hex << nextData << endl;
    uint64_t fullData = (static_cast<uint64_t>(data) << 32) | nextData;
    cout << "FullData : " << hex << fullData << endl;
    uint8_t  field1 = (fullData >> 56) & 0xFF; //8bit
    uint32_t field2 = (fullData >> 27) & 0x1FFFFFFF; //30bit
    uint16_t field3 = (fullData >> 12) & 0x7FFF; //15bit
    uint16_t field4 = fullData & 0x7FF; //11bit
    cout << "Field 1 (8-bit): "  << hex << static_cast<int>(field1) << endl;
    cout << "Field 2 (29-bit): " << hex << field2 << endl;
    cout << "Field 3 (15-bit): " << hex << field3 << endl;
    cout << "Field 4 (11-bit): " << hex << field4 << endl;
}

/*
void GateNETtime(uint64_t data){
  uint8_t  Header   = (data >> 56) & 0xFF;        
  uint32_t sec      = (data >> 27) & 0x1FFFFFFF; 
  uint16_t microsec = (data >> 12) & 0x7FFF;     
  uint16_t nanosec  = data & 0x7FF;              
}
*/

void Rawdata2root(int runN=10, bool ftree=0){
  //===== Define Input/Output File =====
  string ifname[12];
  TString ofname;
  ifstream rawdata[12];
  ifstream readfile;
  bool End_of_Raw = false;
  bool End_of_File[12] = {false};
  bool AllOK = true;
  //===== Define Variables ======
  //===== Raw Data =====
  int Traw_L[12][32][10]; // Leading  : [Kalliope][KEL][ch][Multiplicity]
  int Traw_T[12][32][10]; // Trailing : [Kalliope][KEL][ch][Multiplicity]
  int Traw_TOT[12][32][10];
  int Traw_num[2][2][32] = {}; // Malitiplicity of [Kalliope IP][L/Tr][CH]
  int Nevent = 0;
  bool SameEvent = false;
  int hitNmax =2; // Multiplicity Max
  int ch;

  //===== Fiber CH =====
  int xy=-999;
  int ud=-999;
  int oi=-999;
  int ch_offset=-999;
  
  bool Fired_T [2][2][2][64];      // [x/y][UP/DOWN][1st/2nd][ch][Multiplicity]
  int Fiber_L  [2][2][2][64];   // [x/y][UP/DOWN][1st/2nd][ch][Multiplicity]
  int Fiber_T  [2][2][2][64];   // [x/y][UP/DOWN][1st/2nd][ch][Multiplicity]
  int Fiber_Q  [2][2][2][64]; // [x/y][UP/DOWN][1st/2nd][ch][Multiplicity]
  int Fiber_num[2][2][2][64] = {}; // Multipulicity

  //===== Open Rawdata =====
  for(int i=0;i<6;i++){
    int IP = i+1;
    ifname[i]=Form("./data/MSE0000%d_192.168.10.%d.rawdata",runN,IP);
    rawdata[i].open(ifname[i].c_str());
    
    if (!rawdata[i]) {
      cout << "Unable to open file: " << ifname[i] << endl;
      exit(1); // terminate with error
    }
  }

  ofname = Form("./ROOT/MSE0000%d.root",runN);
  cout << "create root file :" << ofname << endl;
  
  TFile *f = new TFile(ofname,"RECREATE");

  TTree *tree = new TTree("tree","tree");
  
  //===== Initialize =====
  for(int i=0;i<12;i++)for(int j=0;j<32;j++)for(int k=0;k<10;k++)Traw_L[i][j][k]=0;
  for(int i=0;i<12;i++)for(int j=0;j<32;j++)for(int k=0;k<10;k++)Traw_T[i][j][k]=0;
  for(int i=0;i<12;i++)for(int j=0;j<32;j++)for(int k=0;k<10;k++)Traw_TOT[i][j][k]=0;
  //for(int i=0;i<2;i++)for(int j=0;j<2;j++)for(int k=0;k<32;k++)Traw_num[i][j][k]=0;
  
  for(int i=0;i<2;i++)for(int j=0;j<2;j++)for(int k=0;k<2;k++)for(int l=0;l<64;l++)Fiber_L[i][j][k][l]=0;
  for(int i=0;i<2;i++)for(int j=0;j<2;j++)for(int k=0;k<2;k++)for(int l=0;l<64;l++)Fiber_T[i][j][k][l]=0;
  for(int i=0;i<2;i++)for(int j=0;j<2;j++)for(int k=0;k<2;k++)for(int l=0;l<64;l++)Fiber_Q[i][j][k][l]=0;
  
  //===== Define Tree ======
  tree->Branch("Traw_L",Traw_L,"Traw_L[6][32][10]/I");
  tree->Branch("Traw_T",Traw_T,"Traw_T[6][32][10]/I");
  tree->Branch("Traw_TOT",Traw_TOT,"Traw_TOT[6][32][10]/I");
  tree->Branch("Traw_num",Traw_num,"Traw_num[6][32]/I");

  tree->Branch("Fiber_L",Fiber_L,"Fiber_L[2][2][2][64]/I"); //[x/y][up/down][in/out][CH]
  tree->Branch("Fiber_T",Fiber_T,"Fiber_T[2][2][2][64]/I");
  tree->Branch("Fiber_Q",Fiber_Q,"Fiber_Q[2][2][2][64]/I");
  tree->Branch("Fiber_num",Fiber_num,"Fiber_num[2][2][2][64]/I");
  
  
  //===== Define Histgrams =====
  TH2F *hTDC_L[6];
  hTDC_L[0] = new TH2F("hTDC_L_0","TDC[0] Leading ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  hTDC_L[1] = new TH2F("hTDC_L_1","TDC[1] Leading ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  hTDC_L[2] = new TH2F("hTDC_L_2","TDC[2] Leading ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  hTDC_L[3] = new TH2F("hTDC_L_3","TDC[3] Leading ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  hTDC_L[4] = new TH2F("hTDC_L_4","TDC[4] Leading ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  hTDC_L[5] = new TH2F("hTDC_L_5","TDC[5] Leading ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  TH2F *hTDC_T[6];
  hTDC_T[0] = new TH2F("hTDC_T_0","TDC[0] Trailing ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  hTDC_T[1] = new TH2F("hTDC_T_1","TDC[1] Trailing ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  hTDC_T[2] = new TH2F("hTDC_T_2","TDC[2] Trailing ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  hTDC_T[3] = new TH2F("hTDC_T_3","TDC[3] Trailing ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  hTDC_T[4] = new TH2F("hTDC_T_4","TDC[4] Trailing ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  hTDC_T[5] = new TH2F("hTDC_T_5","TDC[5] Trailing ;TDC ch; TDC [ns]",32,0,32,6e4,-150,7e4);
  TH2F *hTraw_TOT[6];
  hTraw_TOT[0] = new TH2F("hTraw_TOT_0","Traw_TOT[0]; TDC ch; Traw_TOT [ns]",32,0,32,6e4,-150,7e4);
  hTraw_TOT[1] = new TH2F("hTraw_TOT_1","Traw_TOT[1]; TDC ch; Traw_TOT [ns]",32,0,32,6e4,-150,7e4);
  hTraw_TOT[2] = new TH2F("hTraw_TOT_2","Traw_TOT[2]; TDC ch; Traw_TOT [ns]",32,0,32,6e4,-150,7e4);
  hTraw_TOT[3] = new TH2F("hTraw_TOT_3","Traw_TOT[3]; TDC ch; Traw_TOT [ns]",32,0,32,6e4,-150,7e4);
  hTraw_TOT[4] = new TH2F("hTraw_TOT_4","Traw_TOT[4]; TDC ch; Traw_TOT [ns]",32,0,32,6e4,-150,7e4);
  hTraw_TOT[5] = new TH2F("hTraw_TOT_5","Traw_TOT[5]; TDC ch; Traw_TOT [ns]",32,0,32,6e4,-150,7e4);
  
  TH2F *hFiber_L[2][2][2];
  TH2F *hFiber_T[2][2][2];
  TH2F *hFiber_Q[2][2][2];
  for(int i=0;i<2;i++){     // x/y
    for(int j=0;j<2;j++){   // up/down
      for(int k=0;k<2;k++){ // out/in
	TString hName, hTitle, XY, UD, OI;
	if(i==0) XY="x"  ; else XY="y";
	if(j==0) UD="up" ; else UD="down";
	if(k==0) OI="out"; else OI="in";
	hName.Form("hFiber_L_%s_%s_%s",XY.Data(),UD.Data(),OI.Data());
	hTitle.Form("hFiber_L[%s][%s][%s]; Fiber ch; TDC [ns]",XY.Data(),UD.Data(),OI.Data());
	hFiber_L[i][j][k] = new TH2F(hName, hTitle, 64,0,64,6e4,-150,7e4);
	hName.Form("hFiber_T_%s_%s_%s",XY.Data(),UD.Data(),OI.Data());
	hTitle.Form("hFiber_T[%s][%s][%s]; Fiber ch; TDC [ns]",XY.Data(),UD.Data(),OI.Data());
	hFiber_T[i][j][k] = new TH2F(hName, hTitle, 64,0,64,6e4,-150,7e4);
	hName.Form("hFiber_Q_%s_%s_%s",XY.Data(),UD.Data(),OI.Data());
	hTitle.Form("hFiber_Q[%s][%s][%s]; Fiber ch; TDC [ns]",XY.Data(),UD.Data(),OI.Data());
	hFiber_Q[i][j][k] = new TH2F(hName, hTitle, 64,0,64,6e4,-150,7e4);
      }
    }
  }
  
  //===== Timer =====
  TStopwatch timer_total;
  timer_total.Start();
  
  //===== Open Rawdata =====
  for(int IP=0;IP<6;IP++){ // IP: Kalliope IP adress
    Nevent = 0;
    cout << "Start Reading Rawdata from Kalliope: " << IP << endl;
    // get file size
    rawdata[IP].seekg(0, ios::end); // going to the end of the file
    streampos fsize = rawdata[IP].tellg(); // rawdata size in byte (B)
    fsize = fsize/4; // rawdata size in 32 bit (4B)
    rawdata[IP].seekg(0, ios::beg); // going to the begin of the file
    cout << Form("rawdata%d filesize :",IP) << fsize << endl;
  }
  //===== for test =====
  //intentionally shift rawdata 0
  char Byte[4];
  //for(int i=0;i<1000;i++) rawdata[0].read(Byte, 4); // reading 4 byte (32 bit)
  
  while(AllOK){
    //cout << "Start read data : " << Nevent << endl;
    for(int IP=0;IP<2;IP++){
      //===== For Reline Up ======
      switch(IP){
	// (xy: x=0, y=1); (ud: u=0, d=1); (oi: o=0; i=1); (ch: 0-31=0, 32-63=1);
      case 0:  xy=0; ud=0; oi=0; ch_offset=0; break;
      case 1:  xy=0; ud=0; oi=0; ch_offset=1; break;
      case 2:  xy=1; ud=0; oi=0; ch_offset=0; break;
      case 3:  xy=1; ud=0; oi=0; ch_offset=1; break;
      case 4:  xy=0; ud=0; oi=1; ch_offset=0; break;
      case 5:  xy=0; ud=1; oi=1; ch_offset=1; break;
      case 6:  xy=1; ud=0; oi=1; ch_offset=0; break;
      case 7:  xy=1; ud=1; oi=1; ch_offset=1; break;
      case 8:  xy=1; ud=1; oi=0; ch_offset=0; break;
      case 9:  xy=1; ud=1; oi=0; ch_offset=1; break;
      case 10: xy=0; ud=1; oi=0; ch_offset=0; break;
      case 11: xy=0; ud=1; oi=0; ch_offset=1; break;
      }
      
      //===== Read Rawdata ======
      //Read_Data(IP, &rawdata[IP], Nevent, End_of_Raw);
      //if(rawdata[IP].eof()) End_of_Raw = true;
      while(!rawdata[IP].eof()){
	//cout << "Enter rawdata loop" << endl;
	char Byte[4];
	rawdata[IP].read(Byte, 4); // reading 4 byte (32 bit)
	unsigned int data = Read_Raw_32bit(Byte);
	//cout << hex << setfill('0') << right << setw(8) << data << endl; //OK
	int Header = (data & 0xff000000) >> 24;
	//if(Header == 0x5c) GateNETtime(rawdata[IP], data);
	if(Header == 1) Initialize(Nevent, SameEvent);

	//===== Leading/Trailing edge =====
	if(SameEvent){
	  if(Header == 3){
	    LT = 0; Timing(LT, data);
	  }
	  if(Header == 4){ // trailing edge
	    LT = 1; Timing(LT, data);
	  }
	  
	  if((data == 0xff550000) & SameEvent){
	    SameEvent = false; break;
	  }
	}
      }
    }
    //===== Display Procedure of Event Loop =====
    if(Nevent %1000 == 0){
      double elapsed = timer_total.RealTime();
      double rate = Nevent / elapsed;
      cout << fixed << setprecision(1) << "Timer :  " << elapsed << " s, "
	   << "Rate : " << (int)rate << " cps, "
	   << "Data : " << Nevent << flush  << " events"<< "\r";
    }
      
    if(Nevent == 1000) break;
    
    //====== Filling Histgrams =====    
    for(int IP=0;IP<2;IP++){
      for(int i=0;i<32;i++)for(int j=0;j<10;j++)Traw_TOT[IP][i][j] = Traw_T[IP][i][j] -Traw_L[IP][i][j];
      for(int i=0;i<32;i++){
	for(int j=0;j<hitNmax;j++){
	  hTDC_L[IP]->Fill(i,Traw_L[IP][i][j]);
	  hTDC_T[IP]->Fill(i,Traw_T[IP][i][j]);
	  hTraw_TOT[IP]->Fill(i,Traw_TOT[IP][i][j]);
	}
      }
    }
    for(int ch=0;ch<64;ch++){
      for(int i=0;i<2;i++){
	for(int j=0;j<2;j++){
	  for(int k=0;k<2;k++){
	    hFiber_L[i][j][k]->Fill(ch,Fiber_L[i][j][k][ch]);
	    hFiber_T[i][j][k]->Fill(ch,Fiber_T[i][j][k][ch]);
	    hFiber_Q[i][j][k]->Fill(ch,Fiber_Q[i][j][k][ch]);
	  }
	}
      }
    }

    if(ftree) tree->Fill();

    //===== END FLAG =====
    for(int i=0;i<12;i++){
      if(End_of_File[i]){
	AllOK = false; break;
      }
    }
  } //===== End of Event Loop ====
  //====== close Input File Stream ======
  for(int IP=0;IP<12;IP++)  rawdata[IP].close();
  timer_total.Stop();
  double totalElapsed = timer_total.RealTime();
  cout << "Total Real time : " << (int)totalElapsed << "s" << endl;
  tree->Write();
  f->Write(); 
}
